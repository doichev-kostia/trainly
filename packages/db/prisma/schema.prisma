generator kysely {
    provider  = "prisma-kysely"
    output    = "../src"
    fileName  = "types.ts"
    camelCase = true
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum SeatClass {
    standard
    premium
}

enum SeatStatus {
    available
    booked
    reserved
}

enum BookingStatus {
    reserved
    paid
    cancelled
}

model train {
    id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    created_at        DateTime @default(now())
    updated_at        DateTime @updatedAt
    name              String
    total_seats       Int
    carriage_capacity Int
    premium_carriages Int

    routes route[]
}

model station {
    id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    name       String

    addresses address[]
    platforms platform[]
}

model address {
    id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    created_at    DateTime @default(now())
    updated_at    DateTime @updatedAt
    country       String
    city          String
    street        String
    street_number String
    index         String
    station_id    String   @db.Uuid

    station station @relation(fields: [station_id], references: [id])
}

model platform {
    id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    name       String
    station_id String   @db.Uuid

    station station @relation(fields: [station_id], references: [id])

    stops         stop[]
    journey_stops journey_stop[]
}

model route {
    id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    created_at    DateTime @default(now())
    updated_at    DateTime @updatedAt
    name          String
    train_id      String   @db.Uuid
    start_stop_id String   @db.Uuid
    end_stop_id   String   @db.Uuid
    pricing       Json     @db.JsonB

    train train @relation(fields: [train_id], references: [id])

    journeys journey[]
    stops    stop[]
}

model stop {
    id                     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    created_at             DateTime @default(now())
    updated_at             DateTime @updatedAt
    duration_from_previous Int
    route_id               String   @db.Uuid
    platform_id            String   @db.Uuid
    next_stop_id           String?  @db.Uuid

    route    route    @relation(fields: [route_id], references: [id])
    platform platform @relation(fields: [platform_id], references: [id])

    journey_stops journey_stop[]
}

model journey {
    id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    created_at     DateTime @default(now())
    updated_at     DateTime @updatedAt
    route_id       String   @db.Uuid
    departure_time DateTime
    delay          Int      @default(0)

    route         route          @relation(fields: [route_id], references: [id])
    seats         seat[]
    journey_stops journey_stop[]
}

model journey_stop {
    id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    created_at       DateTime  @default(now())
    updated_at       DateTime  @updatedAt
    journey_id       String    @db.Uuid
    stop_id          String    @db.Uuid
    expected_arrival DateTime
    actual_arrival   DateTime?
    platform_id      String?   @db.Uuid

    journey  journey   @relation(fields: [journey_id], references: [id])
    stop     stop      @relation(fields: [stop_id], references: [id])
    platform platform? @relation(fields: [platform_id], references: [id])
}

model seat {
    id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    created_at DateTime   @default(now())
    updated_at DateTime   @updatedAt
    number     Int
    class      SeatClass
    journey_id String     @db.Uuid
    status     SeatStatus @default(available)

    journey journey @relation(fields: [journey_id], references: [id])

    tickets ticket[]
}

model customer {
    id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    first_name String
    last_name  String
    email      String

    bookings booking[]
}

model booking {
    id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    created_at  DateTime      @default(now())
    updated_at  DateTime      @updatedAt
    status      BookingStatus
    customer_id String?       @db.Uuid

    customer customer? @relation(fields: [customer_id], references: [id])

    tickets ticket[]
}

model passenger {
    id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    first_name String
    last_name  String

    tickets ticket[]
}

model ticket {
    id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    created_at   DateTime @default(now())
    updated_at   DateTime @updatedAt
    passenger_id String   @db.Uuid
    seat_id      String   @db.Uuid
    booking_id   String   @db.Uuid

    passenger passenger @relation(fields: [passenger_id], references: [id])
    seat      seat      @relation(fields: [seat_id], references: [id])
    booking   booking   @relation(fields: [booking_id], references: [id])
}
